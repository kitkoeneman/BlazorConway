@page "/gameboard/{height:int}/{width:int}"

<h3>GameBoard</h3>

<p>Display game board with height @Height and width @Width. </p>

<style>
	.game-board-container {
		display: grid;
		grid-template-columns: @Width;
	}
	.cell-button-dead {
		height: 24px;
		width: 24px;
		background-color: white;
	}
	.cell-button-alive {
		height: 24px;
		width: 24px;
		background-color: green;
	}
</style>

<!-- 
TODO:
 remove spacing between cells
 reduce cell border thickness
 when dimensions are larger than screen, maintain grid by resizing cells or allow side scrolling
-->

<button @onclick="DoNextGeneration">Next Generation</button>
<button @onclick="CalculateNextGeneration">Calculate</button>
<button @onclick="RenderNextGeneration">Render</button>
<button @onclick="ClearBoard">Clear Board</button>
<button @onclick="PrintStatus">Print Status</button>

<div class="grid">
	@foreach (var cell in CellGrid)
	{
		<button class="@cell.CellStyle" @onclick="cell.ClickCell"></button>
		if (cell.Column == Width - 1)
		{
			<div></div>
		}
	}
</div>

@code{
	[Parameter]
	public int Height { get; set; }

	[Parameter]
	public int Width { get; set; }

	public static Cell[,] CellGrid;

	protected override void OnInitialized()
	{
		CellGrid = new Cell[Height, Width];

		for (int row = 0; row < Height; row++)
		{
			for (int column = 0; column < Width; column++)
			{
				var cell = new Cell(row, column);
				CellGrid[row, column] = cell;
			}
		}
	}

	public class Cell
	{
		public int Row { get; }
		public int Column { get; }
		public bool IsAlive { get; set; }
		public string CellStyle { get; set; }
		public bool NextGenerationIsAlive { get; set; }

		public Cell(int row, int column)
		{
			Row = row;
			Column = column;
			IsAlive = false;
			CellStyle = "cell-button-dead";
		}

		public void ClickCell()
		{
			//int nays = GetNeighbours(Row, Column);
			Console.WriteLine("Cell clicked at " + Row + ", " + Column + " with " + GetNeighbours(Row, Column) + " neighbours.");
			/*
			* TODO implement CellStyle as a LinkedList with two string items.  
			* Have each item point at the other, so you can do something like:
			*	IsAlive = !IsAlive;
			*   CellStyle = CellStyleChoices.next
			* (instead of if/else statement) 
			*/
			if (IsAlive)
			{
				IsAlive = false;
				CellStyle = "cell-button-dead";
			}
			else
			{
				IsAlive = true;
				CellStyle = "cell-button-alive";
			}
			Console.WriteLine("Cell is now " + this.IsAlive);
		}

		public static int GetNeighbours(int row, int col)
		{
			int Neighbours = 0;

			try
			{
				if (CellGrid[row - 1, col - 1].IsAlive)
				{
					Neighbours++;
				}
			}
			catch { }
			try
			{
				if (CellGrid[row - 1, col].IsAlive)
				{
					Neighbours++;
				}
			}
			catch { }
			try
			{
				if (CellGrid[row - 1, col + 1].IsAlive)
				{
					Neighbours++;
				}
			}
			catch { }
			try
			{
				if (CellGrid[row, col - 1].IsAlive)
				{
					Neighbours++;
				}
			}
			catch { }
			try
			{
				if (CellGrid[row, col + 1].IsAlive)
				{
					Neighbours++;
				}
			}
			catch { }
			try
			{
				if (CellGrid[row + 1, col - 1].IsAlive)
				{
					Neighbours++;
				}
			}
			catch { }
			try
			{
				if (CellGrid[row + 1, col].IsAlive)
				{
					Neighbours++;
				}
			}
			catch { }
			try
			{
				if (CellGrid[row + 1, col + 1].IsAlive)
				{
					Neighbours++;
				}
			}
			catch { }

			return Neighbours;
		}
	}

	public void CalculateNextGeneration()
	{
		for (int row = 0; row < Height; row++)
		{
			for (int col = 0; col < Width; col++)
			{
				if (Cell.GetNeighbours(row, col) < 2)
				{
					CellGrid[row, col].NextGenerationIsAlive = false;
				}
				else if (Cell.GetNeighbours(row, col) > 3)
				{
					CellGrid[row, col].NextGenerationIsAlive = false;
				}
				else if (!CellGrid[row, col].IsAlive && Cell.GetNeighbours(row, col) == 3)
				{
					CellGrid[row, col].NextGenerationIsAlive = true;
				}
				else if (CellGrid[row, col].IsAlive && (Cell.GetNeighbours(row, col) == 2 || Cell.GetNeighbours(row, col) == 3))
				{
					CellGrid[row, col].NextGenerationIsAlive = true;
				}
			}
		}
	}

	public void RenderNextGeneration()
	{
		for (int row = 0; row < Height; row++)
		{
			for (int col = 0; col < Width; col++)
			{
				if (CellGrid[row, col].NextGenerationIsAlive)
				{
					CellGrid[row, col].CellStyle = "cell-button-alive";
					CellGrid[row, col].IsAlive = true;
				}
				else
				{
					CellGrid[row, col].CellStyle = "cell-button-dead";
					CellGrid[row, col].IsAlive = false;
				}
			}
		}
	}

	public void DoNextGeneration()
	{
		CalculateNextGeneration();
		RenderNextGeneration();
	}

	public void PrintStatus()
	{
		Console.WriteLine("---------------------\n---------------------\n");
		for (int row = 0; row < Height; row++)
		{
			for (int col = 0; col < Width; col++)
			{
				Console.WriteLine("Cell at " + row + ", " + col + " IsAlive: " + CellGrid[row, col].IsAlive + " NextGen: " + CellGrid[row, col].NextGenerationIsAlive);
			}
			Console.WriteLine("\n");
		}
	}

	public void ClearBoard()
	{
		for (int row = 0; row < Height; row++)
		{
			for (int col = 0; col < Width; col++)
			{
				CellGrid[row, col].NextGenerationIsAlive = false;
			}
		}
		RenderNextGeneration();
	}
}